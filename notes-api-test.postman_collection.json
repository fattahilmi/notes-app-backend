{
	"info": {
		"_postman_id": "48024cf9-a3d6-486c-b3c9-90afc6b56c55",
		"name": "Notes API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18097188"
	},
	"item": [
		{
			"name": "Adding Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Skenario 1: Adding Notes (Memasukkan catatan baru)",
							"",
							"// Pastikan response memiliki status code 201.",
							"// Pastikan header response Content-Type memiliki nilai application/json.",
							"// Pastikan body response adalah object.",
							"// Pastikan body response memiliki properti dan nilai yang sesuai.",
							"// Pastikan data pada response body memiliki noteId dan nilainya tidak kosong.",
							"",
							"",
							"pm.test('response status code should have 201', () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object')",
							"});",
							"",
							"pm.test('response body should have the correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    ",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"",
							"    // pm.expect(responseJson).to.ownProperty('message');",
							"    // pm.expect(responseJson.status).to.equals('Catatan berhasil ditambahkan');",
							"",
							"    // pm.expect(responseJson).to.ownProperty('data');",
							"    // pm.expect(responseJson.status).to.be.an('object');",
							"});",
							"",
							"pm.test('response body data should have noteId property and not equal to empty', () => {",
							"    const responseJson = pm.response.json();",
							"    const { data } = responseJson;",
							"",
							"    pm.expect(data).to.ownProperty('noteId');",
							"    pm.expect(data.noteId).to.not.equals('');",
							"",
							"    pm.environment.set('noteId', data.noteId);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Catatan A\",\n    \"tags\": [\"Android\", \"Web\"],\n    \"body\": \"Isi dari catatan A\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/notes/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"notes",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Geting All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Skenario 2: Getting All Notes (Mendapatkan seluruh catatan)",
							"",
							"// Pastikan response memiliki status code 200.",
							"// Pastikan header response Content-Type memiliki nilai application/json.",
							"// Pastikan body response adalah object.",
							"// Pastikan body response memiliki properti dan nilai atau tipe data yang sesuai.",
							"// Pastikan data pada response body memiliki array notes dan terdapat minimal 1 item di dalamnya.",
							"",
							"pm.test('response status code should have 200', () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.test('response header should have Content-Type application/json', () => {",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8')",
							"})",
							"",
							"pm.test('response body should be an object', () => {",
							"    const responseJson = pm.response.json()",
							"    pm.expect(responseJson).to.be.an('object')",
							"})",
							"",
							"pm.test('response body should have property status, message, and data', () => {",
							"    const responseJson = pm.response.json()",
							"",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"",
							"    pm.expect(responseJson).to.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('Get all notes');",
							"",
							"    pm.expect(responseJson).to.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"})",
							"",
							"pm.test('response body should have array notes and at least one item inside those array', () => {",
							"    const responseJson = pm.response.json();",
							"    const { data } = responseJson;",
							"",
							"    pm.expect(data).to.have.ownProperty('notes');",
							"    pm.expect(data.notes).to.be.an('array');",
							"    pm.expect(data.notes).lengthOf.at.least(1);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/notes/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"notes",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting Specified Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Pastikan response memiliki status code 200.",
							"// Pastikan header response Content-Type memiliki nilai application/json.",
							"// Pastikan body response merupakan object.",
							"// Pastikan body response memiliki properti dan nilai atau tipe data yang sesuai.",
							"// Pastikan data pada response body memiliki properti note yang merupakan sebuah objek.",
							"// Pastikan objek note di dalam data memiliki properti id, title, body, dan tags dengan nilai yang sesuai.",
							"",
							"pm.test(\"response should have status code 200\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.test(\"response should have Content-Type application/json\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
							"})",
							"",
							"pm.test(\"response body should be an object\", () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an(\"object\")",
							"})",
							"",
							"pm.test(\"response body should have the correct property and value\", () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property(\"status\", \"success\")",
							"    pm.expect(responseJson).to.have.property(\"data\")",
							"    pm.expect(responseJson.data).to.be.an(\"object\")",
							"})",
							"",
							"pm.test('response body data should contain note object', () => {",
							"   const responseJson = pm.response.json();",
							"   const { data } = responseJson;",
							" ",
							"   pm.expect(data).to.have.ownProperty('note');",
							"   pm.expect(data.note).to.be.an('object');",
							"}); ",
							"",
							"pm.test('note object should contain correct value for id, title, body, and tags property', () => {",
							"    const responseJson = pm.response.json();",
							"    const { data: { note } } = responseJson;",
							"",
							"    const expectedId = pm.environment.get('noteId');",
							"    const expectedTitle = 'Catatan A';",
							"    const expectedTags = [\"Android\", \"Web\"];",
							"    const expectedBody = 'Isi dari catatan A';",
							"",
							"    pm.expect(note).to.have.ownProperty('id');",
							"    pm.expect(note.id).to.equals(expectedId);",
							"    pm.expect(note).to.have.ownProperty('title');",
							"    pm.expect(note.title).to.equals(expectedTitle);",
							"    pm.expect(note).to.have.ownProperty('tags');",
							"    pm.expect(note.tags).to.eql(expectedTags)",
							"    pm.expect(note).to.have.ownProperty('body');",
							"    pm.expect(note.body).to.equals(expectedBody);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Pastikan response memiliki status code 200.",
							"// Pastikan header response Content-Type memiliki nilai application/json.",
							"// Pastikan body response adalah object.",
							"// Pastikan body response memiliki properti dan nilai yang sesuai.",
							"// Ketika mengakses catatan yang diperbaharui",
							"// Pastikan catatan yang diperbarui memiliki nilai terbaru.",
							"",
							"pm.test('Response should have status code 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Content-Type is application/json', function () {",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('Response body is an object', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    const noteId = pm.environment.get(\"noteId\"); ",
							" ",
							"    pm.expect(responseJson).to.have.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    pm.expect(responseJson).to.have.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals(`Note with id ${noteId} updated`);",
							"});",
							"",
							"pm.test('when request the updated note', () => {",
							"    const noteId = pm.environment.get(\"noteId\");",
							"    pm.sendRequest(`http://localhost:5000/api/notes/${noteId}`, (error, response) => {",
							"        if (!error) {",
							"            pm.test('then the updated note should contain the latest data', () => {",
							"                const responseJson = response.json();",
							"                const { data: { note }} = responseJson;",
							"",
							"                const expectedTitle = 'Catatan A Revised';",
							"                const expectedTags = ['Android', 'Web'];",
							"                const expectedBody = 'Isi dari Catatan A Revised';",
							"",
							"                pm.expect(note.title).to.equals(expectedTitle);",
							"                pm.expect(note.tags).to.eql(expectedTags);",
							"                pm.expect(note.body).to.equals(expectedBody);",
							"            }); ",
							"        }",
							"    })",
							"",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Catatan A Revised\",\n    \"tags\": [\"Android\", \"Web\"],\n    \"body\": \"Isi dari Catatan A Revised\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Specified Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response should have status code 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Content-Type is application/json', function () {",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('Response body is an object', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    const noteId = pm.environment.get(\"noteId\"); ",
							" ",
							"    pm.expect(responseJson).to.have.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    pm.expect(responseJson).to.have.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals(`Note with id ${noteId} deleted`);",
							"});",
							"",
							"pm.test('when request the deleted note', () => {",
							"    const noteId = pm.environment.get(\"noteId\");",
							"",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {",
							"        if (!error && response.code === 404) {",
							"            const responseJson = response.json();",
							"            pm.test(\"the deleted note should be not found\", () => {",
							"                pm.expect(responseJson).to.be.an('object'); // Check if response is a valid JSON",
							"                pm.expect(responseJson.status).to.equals('fail');",
							"                pm.expect(responseJson.message).to.equals(`Note with id ${noteId} not found`);",
							"            });",
							"        }",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Catatan A Revised\",\n    \"tags\": [\"Android\", \"Web\"],\n    \"body\": \"Isi dari Catatan A Revised\"\n}"
				},
				"url": {
					"raw": "http://localhost:5000/api/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	]
}